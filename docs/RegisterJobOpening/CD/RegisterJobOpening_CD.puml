@startuml
skinparam handwritten true
skinparam packageStyle rect
skinparam defaultFontName FG Virgil
skinparam shadowing false

    class RegisterJobOpeningUI <<presentation>>{
        + headline(): String
        + doShow(): boolean
    }

    class RegisterJobOpeningController<<application>> {
        + findAllCostumers()
        + addJobOpening( jobTitle, description, numberOfVacancies,  contractType,workRegime, Calendar jobOpeningCreationDate, jobOpeningStatus, customer,  serialNumber)
        + registerJobOpening(jobTitle, description, numberOfVacancies,  contractType,workRegime, jobOpeningCreationDate, jobOpeningStatus, customer,  serialNumber,  String)
    }


    class JobOpeningBuilder<<builder>> {
        + build(): JobOpening
        + titled( jobTitle)
        + withJobReference( jobReference)
        + withDescription( description)
        + withNumberOfVacancies( numberOfVacancies)
        + withContractType( contractType)
        + withWorkRegime( workRegime)
        + withJobOpeningCreationDate( jobOpeningCreationDate)
        + withJobOpeningStatus( jobOpeningStatus)
        + withCustomer( customer)
    }

    class AuthorizationService <<service>>{
        + ensureAuthenticatedUserHasAnyOf(roles: Role[]): void

    class JobOpeningService <<service>>{
        + registerApplication(candidate: Candidate, jobOpening: JobOpening, applicationStatus: ApplicationStatus, applicationDate: Date, dirPath: String): JobApplication
    }

    class JobOpening {
        + JobOpening( jobTitle, jobReference, description, numberOfVacancies,  contractType, workRegime, jobOpeningCreationDate, jobOpeningStatus, customer)
    }

    class PersistenceContext {
        + repositories(): RepositoryFactory
    }

    class RepositoryFactory {
        + candidates(): CandidateRepository
        + applications(): JobApplicationRepository
        + jobOpenings(): JobOpeningRepository
    }

    class JobOpeningRepository {
        + save(jobApplication: JobApplication): void
    }

    class JobOpeningRepository {
        + findByJobReference(jobReference: JobReference): JobOpening
    }

RegisterJobOpeningUI --> RegisterJobOpeningController: theController
RegisterJobOpeningController --> AuthorizationService : authzService
RegisterJobOpeningController --> JobOpeningRepository: jobOpeningRepository
RegisterJobOpeningController --> JobOpeningBuilder: jobOpeningBuilder
JobOpeningBuilder --> JobOpening: build
RegisterJobOpeningController --> PersistenceContext : persistence
PersistenceContext --> RepositoryFactory : factory
@enduml
