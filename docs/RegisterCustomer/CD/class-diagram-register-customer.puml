@startuml
'http://plantuml.com/skinparam.html
skinparam handwritten true
skinparam packageStyle rect
skinparam defaultFontName FG Virgil
skinparam shadowing false


class RegisterCustomerUI {
- doShow()
- headline()
}
class RegisterCustomerController {
    + addCustomer(address: Address, email : String, password : String, firstName : String, lastName : String, email : String, roles: Set<Role>, customerCode : CustomerCode, customerName : Designation)
    + addCustomer(address : Address email : String, password : String, firstName : String, lastname : String, email : String, roles : Set<Role>, time : CurrentTimeCalendars)
    + getGeneratedPassword()
}
class PasswordGenerator {
    + generatePassword(): String
}
class UserManagementService {
    + registerUser(email : String, password : String, firstName : String, lastname : String, email : String, roles : Set<Role>, time : CurrentTimeCalendars)
}
class AuthorizationService {
    + ensureAuthenticatedUserHasAnyOf(roles: Roles[]): void
}

class UserSession {
 + userSession()
}
class SystemUserBuilder {
    + create(): void
}
class CustomerBuilder {
    + create(): void
    + withAddress(address: String): void
    + withCustomerManager(customerManagerUser: SystemUser): void
    + withName (customerName : Designation) : void
    + withCustomerCode (customerCode : CustomerCode)
    + build(): Customer
}
class SystemUser {
}
class Customer {
    + Customer(user: SystemUser, customerManagerUser: SystemUser, address: Address)
    + validateAddress(address: Address): boolean
}
class PersistenceContext {
  + repositories()
}
class RepositoryFactory {
  + users()
  + customers()
}
class UserRepository {
    + create(): void
    + save(user: User): void
}
class CustomerRepository {
    + create(): void
    + save(customer: Customer): void
}

RegisterCustomerUI --> RegisterCustomerController: theController
RegisterCustomerController --> PasswordGenerator: passwordGenerator
RegisterCustomerController --> CustomerBuilder: builder
RegisterCustomerController --> AuthorizationService : authz
RegisterCustomerController --> UserManagementService : userSvc
UserManagementService --> SystemUserBuilder : builder
SystemUserBuilder --> SystemUser : builds
UserManagementService --> UserRepository : userRepository
CustomerBuilder --> Customer: builds
RegisterCustomerController --> RepositoryFactory: repositories
RepositoryFactory --> CustomerRepository: customerRepository
RegisterCustomerController --> PersistenceContext : persistence
PersistenceContext --> RepositoryFactory: factory

@enduml