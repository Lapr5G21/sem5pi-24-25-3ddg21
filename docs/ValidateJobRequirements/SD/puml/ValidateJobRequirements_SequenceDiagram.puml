@startuml



skinparam monochrome true
skinparam packageStyle rect

skinparam shadowing false
autoNumber

actor CostumerManager as CM
participant ValidateJobRequirementsUI as UI <<presentation>>
participant ValidateJobRequirementsController as Controller <<application>>
participant AuthorizationService as Authorization <<service>>
participant UserSession as Session <<session>>
participant JobApplicationService as JobApplicationService <<service>>
participant CandidateService as CandidateService <<service>>
participant JobApplicationBuilder as JobApplicationBuilder <<builder>>
participant "JobApplication : JobApplication" as Domain <<domain>>
participant PersistenceContext as Persistence <<persistence>>
participant RepositoryFactory as Factory <<factory>>
database JobApplicationRepository as JobApplicationRepository <<repository>>




activate CM

CM -> UI: asks to validate job requirements
activate UI

    UI -> Controller: create()
    UI -> Controller: allJobApplications()

    activate Controller

            Controller -> Authorization : create()
            activate Authorization

            Controller -> Authorization : authorizationService()

            Authorization --> Controller : authorizationService


            Controller -> Authorization : ensureAuthenticatedUserHasAnyOf(Jobs4uRoles.POWERUSER,Jobs4uRoles.ADMIN,Jobs4uRoles.CUSTOMERMANAGER)

            Controller -> Authorization : session()

            Authorization --> Controller : userSession
            deactivate Authorization

            Controller -> UserSession : authenticatedUsers()
            activate UserSession
            UserSession --> Controller : costumerManager

            deactivate UserSession

            Controller -> Persistence : repositories()

            activate Persistence

            Persistence -> Factory : create()

            Persistence --> Controller : factory

            deactivate Persistence

            Controller -> Factory : allJobApplications()

            activate Factory

            Factory -> JobApplicationRepository : create

            Factory --> Controller : jobApplicationRepository
            deactivate Factory

            Controller -> JobApplicationService : create(jobApplicationRepository)
            JobApplicationService --> Controller : jobApplicationService
            Controller --> UI : JobApplications
            UI --> CM : asks to insert a job reference
            CM --> UI : inserts a job reference
            UI --> Controller : jobRequirementsValidation(jobReference)

            Controller -> JobApplicationRepository : findByJobReference(jobReference)
            activate JobApplicationRepository
            JobApplicationRepository --> Controller : jobApplication
            deactivate JobApplicationRepository
            Controller --> JobRequirementsPlugIn : validateJobRequirements(jobReference)
            activate JobRequirementsPlugIn
            JobRequirementsPlugIn --> Controller : check
            deactivate JobRequirementsPlugIn
            Controller --> JobApplicationService : changeApplicationStatus(jobApplication,check)
            JobApplicationService -> Application : changeApplicationStatus(jobApplication)
            activate Application
            Application --> JobApplicationService : application
            deactivate Application


            JobApplicationService -> JobApplicationRepository : updateJobApplication(jobApplication)
            activate JobApplicationRepository
            JobApplicationRepository --> JobApplicationService : jobApplication
            deactivate JobApplicationRepository

            JobApplicationService --> Controller : jobApplication
            Controller --> UI : Display Operation Sucessfull
            UI --> CM : Display Operation Sucessfull Message

deactivate UI
deactivate CM





@enduml