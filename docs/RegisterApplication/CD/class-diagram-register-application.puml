@startuml
skinparam handwritten true
skinparam packageStyle rect
skinparam defaultFontName FG Virgil
skinparam shadowing false

    class RegisterApplicationUI <<presentation>>{
        + headline(): String
        + doShow(): boolean
    }

    class RegisterApplicationController<<application>> {
        + findCandidateFile(dirPath: String): File
        + extractCandidateInfo(candidateFile: File): List<String>
        + findByEmail(emailAddress: String): Optional<Candidate>
        + findByJobReference(jobReference: JobReference): Optional<JobOpening>
        + registerApplication(candidate: Candidate, jobOpening: JobOpening, applicationStatus: ApplicationStatus, applicationDate: Date, dirPath: String): void
    }


    class JobApplicationBuilder<<builder>> {
        + build(): void
        + withCandidate(candidate: Candidate): JobApplicationBuilder
        + withJobOpening(jobOpening: JobOpening): JobApplicationBuilder
        + withApplicationStatus(applicationStatus: ApplicationStatus): JobApplicationBuilder
        + withApplicationDate(applicationDate: Date): JobApplicationBuilder
        + withApplicationDirectory(dirPath: String): JobApplicationBuilder
    }


    class AuthorizationService <<service>>{
        + ensureAuthenticatedUserHasAnyOf(roles: Role[]): void

    class JobApplicationService <<service>>{
        + registerApplication(candidate: Candidate, jobOpening: JobOpening, applicationStatus: ApplicationStatus, applicationDate: Date, dirPath: String): JobApplication
    }

    class CandidateService <<service>>{
        + findByEmail(email: String): Candidate
        + generatePassword() : String
        + registerCandidate(username : String , password : String, firstName : String, lastName: String
                           email : String , roles : Set<Role>, createdOn : Calendar ,phoneNumber : String)
    }

    class FileReader <<reader>> {
        + findCandidateFile(dirPath: String): File
        + extractCandidateInfo(candidateFile: File): List<String>
    }


    class JobApplication {
        + JobApplication(candidate: Candidate, jobOpening: JobOpening, applicationStatus: ApplicationStatus, applicationDate: Date, applicationDirectory: String)
    }

    class PersistenceContext {
        + repositories(): RepositoryFactory
    }

    class RepositoryFactory {
        + candidates(): CandidateRepository
        + applications(): JobApplicationRepository
        + jobOpenings(): JobOpeningRepository
    }

    class CandidateRepository {
        + findByEmail(email: String): Candidate
    }

    class JobApplicationRepository {
        + save(jobApplication: JobApplication): void
    }

    class JobOpeningRepository {
        + findByJobReference(jobReference: JobReference): JobOpening
    }

RegisterApplicationUI --> RegisterApplicationController: theController
RegisterApplicationController --> FileReader: reader
RegisterApplicationController --> CandidateService: candidateService
RegisterApplicationController --> AuthorizationService : authzService
CandidateService --> CandidateRepository: candidateRepository
RegisterApplicationController --> JobOpeningRepository: jobOpeningRepository
RegisterApplicationController --> JobApplicationService: jobApplicationService
JobApplicationService --> JobApplicationBuilder: builder
JobApplicationBuilder --> JobApplication: build
JobApplicationService --> JobApplicationRepository: jobApplicationRepository
RegisterApplicationController --> PersistenceContext : persistence
PersistenceContext --> RepositoryFactory : factory
@enduml
