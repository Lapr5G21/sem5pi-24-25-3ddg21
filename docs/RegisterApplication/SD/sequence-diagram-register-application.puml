@startuml
skinparam handwritten true
skinparam monochrome true
skinparam packageStyle rect
skinparam defaultFontName FG Virgil
skinparam shadowing false

actor Operator as op
participant RegisterApplicationUI as UI <<presentation>>
participant RegisterApplicationController as Controller <<application>>
participant AuthorizationService as Authz <<service>>
participant FileReader as Reader <<Util>>
participant JobApplicationService as JobApplicationService <<service>>
participant CandidateService as CandidateService <<service>>
participant JobApplicationBuilder as JobApplicationBuilder <<builder>>
participant "JobApplication : JobApplication" as Domain <<domain>>
participant PersistenceContext as Persistence <<persistence>>
participant RepositoryFactory as Factory <<factory>>
database JobApplicationRepository as JobApplicationRepository <<repository>>
database JobOpeningRepository as JobOpeningRepository<<repository>>
database CandidateRepository as CandidateRepository <<repository>>


activate op

op -> UI: Initiate Application Registration
activate UI

    UI -> Controller: create()

    activate Controller

            Controller -> Persistence : repositories()

            activate Persistence

            Persistence -> Factory : create()

            Persistence --> Controller : factory

            deactivate Persistence

            Controller -> Factory : candidates()

            activate Factory

            Factory --> Controller : candidateRepository
            deactivate Factory

            Controller --> CandidateRepository : create()

            Controller --> Factory : applications()

            activate Factory

            Factory --> Controller : applicationRepository

            deactivate Factory

            Controller --> CandidateService : create(candidateRepository)

            Controller --> JobApplicationService : create(applicationRepository)

            deactivate Controller

    UI-> op : asks the directory where the candidate files are located

    op -> UI : inserts the directory path

    UI -> Controller : findCandidateFile(dirPath)
        
       activate Controller

        Controller -> Authz : ensureAuthenticatedUserHasAnyOf(Jobs4uRoles.POWERUSER,Jobs4uRoles.ADMIN,Jobs4uRoles.Operator)

        Controller -> Reader : findCandidateFile(dirPath)

            activate Reader

            Reader --> Controller : candidateFile
                deactivate Reader
            Controller --> UI : candidateFile

    deactivate Controller

    UI -> Controller : extractCandidateInfo(candidateFile)

    activate Controller

            Controller -> FileReader : extractCandidateInfo(candidateFile)

            activate FileReader

            FileReader --> Controller : listWithCandidateInfo

            deactivate FileReader

            Controller --> UI : listWithCandidateInfo

            deactivate Controller

            UI -> Controller : findByEmail(emailAddress)

            activate Controller

            Controller -> CandidateService : findByEmail(email)

            activate CandidateService

            CandidateService -> CandidateRepository : findByEmail(email)

            activate CandidateRepository

            CandidateRepository --> CandidateService : candidate

            deactivate CandidateRepository

            CandidateService --> Controller : candidate

            deactivate CandidateService

            Controller --> UI : candidate
            deactivate Controller

            opt if candidate == null

            ref over UI
                register Candidate
            end ref

            end opt

            UI -> Controller : findByJobReference(jobReference)

            activate Controller

            Controller -> Factory : jobOpenings()

            activate Factory

            Factory --> Controller : jobOpeningRepository

            Controller -> JobOpeningRepository : findByJobReference

            activate JobOpeningRepository

            JobOpeningRepository --> Controller : jobOpening

            deactivate JobOpeningRepository

            Controller --> UI : jobOpening

            deactivate Controller

            UI -> Controller : registerApplication(candidate,jobOpening,applicationStatus,applicationDate,dirPath)

            activate Controller

            Controller -> JobApplicationService : registerApplication(candidate,jobOpening,applicationStatus,applicationDate,dirPath)

            activate JobApplicationService

            JobApplicationService -> JobApplicationBuilder : create()

            JobApplicationService -> JobApplicationBuilder : build()

            activate JobApplicationBuilder

            JobApplicationBuilder -> "JobApplication : JobApplication" : create()

            JobApplicationBuilder -> JobApplicationBuilder : withCandidate(candidate)
            JobApplicationBuilder -> JobApplicationBuilder : withJobOpening(jobOpening)
            JobApplicationBuilder -> JobApplicationBuilder : withApplicationStatus(applicationStatus)
            JobApplicationBuilder -> JobApplicationBuilder : withApplicationDate(applicationDate)
            JobApplicationBuilder -> JobApplicationBuilder : withApplicationDirectory(dirPath)

            JobApplicationBuilder --> JobApplicationService : jobApplication

            deactivate JobApplicationBuilder

            JobApplicationService -> JobApplicationRepository : save(jobApplication)

            activate JobApplicationRepository

            JobApplicationRepository --> JobApplicationService : jobApplication

            deactivate JobApplicationRepository

            JobApplicationService --> Controller : jobApplication

            deactivate JobApplicationService

            Controller --> UI : jobApplication

            deactivate Controller

            UI -> op : displays the success message

deactivate UI
deactivate op
@enduml