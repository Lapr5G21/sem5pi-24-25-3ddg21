@startuml
class PublishRankResultsUI <<presentation>>{
        + headline(): String
        + doShow(): boolean
    }

    class PublishRankResultsController<<application>> {
        + getApplicationsByJobReference(jobReference : String): Iterable<JobApplication>
        + verifyIsInResultPhase(jobReference : String) : JobOpeningProcess
        + publishRankResults(rankList : List<Rank>, applicationList : List <JobApplication>) : void
    }

    class JobApplicationService <<service>>{
        + findByJobReference(jobReference:String) : Iterable<JobApplication>
    }

    class PersistenceContext {
        + repositories(): RepositoryFactory
    }

    class RepositoryFactory {
        + applications(): JobApplicationRepository
        + jobOpeningProcesses() : JobOpeningProcessRepository
        + ranks() : RankRepository
    }

    class JobApplicationRepository {
        + findByJobReference(jobReference : String): Iterable<JobApplication>
    }

    class JobOpeningProcessRepository{
        + findByJobReference(jobReference : String)
    }

    class RankRepository{
        + getRankByJobApplication(id : Long) : Optional<Rank>
    }

    class RankService {
        - rankRepository: RankRepository
        - jobApplicationRepository: JobApplicationRepository
        + RankService(rankRepository: RankRepository)
        + publishRanks(ranks: List<Rank>, applications: List<JobApplication>): void
        + getRanksByJobApplications(applications: Iterable<JobApplication>): List<Rank>
        - acceptedTemplateMessage(application: JobApplication, fromEmail: String): String
        - rejectedTemplateMessage(application: JobApplication, fromEmail: String): String
        - customerTemplateMessage(customerName: String, jobTitle: String, rankedList: List<String>, unrankedList: List<String>): String
    }

    class Rank {
        - publish() : Rank
    }

    class JobApplication {
        - changeApplicationStatus(applicationStatus : ApplicationStatus) : JobApplication
    }



PublishRankResultsUI --> PublishRankResultsController: theController
PublishRankResultsController --> JobApplicationService: jobApplicationService
PublishRankResultsController --> RankService : rankService
PublishRankResultsController --> JobOpeningProcessRepository : jobOpeningProcessRepository
JobApplicationService --> JobApplicationRepository: jobApplicationRepository
JobApplicationService --> JobApplication : jobApplication
RankService --> RankRepository : rankRepository
RankService --> Rank: rank
PublishRankResultsController --> PersistenceContext : persistence
PersistenceContext --> RepositoryFactory : factory
@enduml