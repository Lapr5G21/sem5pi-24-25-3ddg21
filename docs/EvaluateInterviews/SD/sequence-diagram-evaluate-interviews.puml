@startuml
title Evaluate the interviews for a Job Opening

'skinparam
skinparam handwritten false
skinparam packageStyle rect
skinparam defaultFontName FG Virgil
skinparam shadowing false

actor CostumerManager as Actor

participant "EvaluateInterviewsUI" as UI
participant "EvaluateInterviewsController" as Controller
participant JobApplicationService as Service <<service>>
participant InterviewBuilder as InterviewBuilder <<builder>>
participant "InterviewModelPlugin" as Plugin <<plugin>>
participant PersistenceContext as Persistence <<persistence>>
participant RepositoryFactory as Factory <<factory>>
database InterviewRepository as InterviewRepository <<repository>>
database "JobApplicationRepository" as JobApplicationRepository <<repository>>
database "InterviewModelRepository" as InterviewModelRepository <<repository>>


activate Actor

Actor -> UI: Evaluate the interviews for a Job Opening
activate UI

UI -> Controller: create()
activate Controller

UI --> Actor : asks for job reference

Actor -> UI : job reference

    UI -> Controller : allApplications(jobReference)

    Controller -> Service : listAllApplications(jobReference)
    activate Service

            Service -> Persistence : create()
            activate Persistence

            Persistence -> Factory : factory()
            deactivate Persistence
            activate Factory

            Factory --> Service : factory
            deactivate Factory

            Service -> Factory : applications()
            activate Factory

            Factory --> Service : JobApplicationRepository
            deactivate Factory

            Service -> JobApplicationRepository : findByJobReference(jobReference)
            activate JobApplicationRepository

            JobApplicationRepository --> Service : applications
            deactivate JobApplicationRepository

            Service --> Controller : applications
            deactivate Service

            Controller --> UI : applications

            loop for each JobApplication

            UI -> Controller : evaluateInterview(directoryFilePath, application, jobReference)

                Controller -> Factory : interviewmodels()
                activate Factory

                Factory --> Controller : interviewRepository
                deactivate Factory

                Controller -> InterviewModelRepository : findByJobReference(jobReference)
                activate InterviewModelRepository

                InterviewModelRepository --> Controller : interviewModel
                deactivate InterviewModelRepository


    alt if InterviewModel is present

        Controller -> InterviewBuilder: withTitle(title)
        activate InterviewBuilder

        Controller -> InterviewBuilder: withDate(Calendar.getInstance())

        Controller -> InterviewBuilder: withModel(jobReference, pluginName)

        InterviewBuilder --> Controller: interview
        deactivate InterviewBuilder

        Controller -> InterviewRepository: save(interview)
        activate InterviewRepository

        InterviewRepository --> Controller : interview

        Controller -> Plugin: create
        activate Plugin

        Controller -> Plugin: evaluateInterviewAndShowGrades(directoryFilePath, interview)
        note right of Plugin : this path is present in the application

        Plugin --> Controller: evaluated interview
        deactivate Plugin
        end

        Controller --> UI: evaluated interview
    else
        Controller --> UI: Error: Interview Model not found
        deactivate Controller
end

UI --> Actor: Display the score of interview or error
deactivate UI
deactivate Actor

@enduml