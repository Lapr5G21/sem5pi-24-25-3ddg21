@startuml
'http://plantuml.com/skinparam.html
skinparam handwritten true
skinparam monochrome true
skinparam packageStyle rect
skinparam defaultFontName FG Virgil
skinparam shadowing false

actor Admin as Actor
participant DeactivateBackofficeUserUI as UI <<presentation>>
participant DeactivateBackofficeUserController as Controller <<application>>
participant AuthorizationService as AuthzService<<service>>
participant UserManagementService as UserService<<service>>
participant SystemUserBuilder as Builder <<builder>>
participant "systemUser:SystemUser" as Domain <<domain>>
participant PersistenceContext as Persistence <<persistence>>
participant RepositoryFactory as Factory <<factory>>
database UserRepository as Repository <<repository>>

Actor --> UI: Disable backoffice Users
activate Actor
activate UI

    UI -> Controller: create

        UI --> Controller : activeBackofficeUsers()

        activate Controller

        Controller --> AuthzService : ensureAuthenticatedUserHasAnyOf(Jobs4uRoles.POWER_USER,Jobs4uRoles.ADMIN)

        deactivate AuthzService

        Controller --> UserService : activeUsers()

        activate UserService

        UserService --> Persistence : repositories()

        Persistence --> Factory : create()

        Persistence --> UserService : factory
        deactivate Persistence

        UserService --> Factory : users()
        activate Factory

        Factory --> Repository : create()

        Factory --> UserService : userRepository
        deactivate Factory

        UserService --> Repository : findByActive(true)
        activate Repository

        Repository --> UserService : activeUsers
        deactivate Repository

        UserService --> Controller : activeUsers
        deactivate UserService

        activate Controller

        Controller --> Controller : filterBackofficeUsers(activeUsers)

        deactivate Controller

        Controller --> UI : activeBackofficeUsers

        deactivate Controller

        UI--> Actor : display active backoffice users
        deactivate UI

        Actor --> UI : select the user to deactivate

        activate UI

        UI --> Controller : deactivateUser(user)

        activate Controller

        Controller --> UserService : deactivateUser(user)

        activate UserService

        UserService --> Domain : deactivate(CurrentTime.Calendar.now())

        UserService --> Repository : save(user)

        UserService --> Controller : user
        deactivate UserService

        Controller --> UI : user
        deactivate Controller

        UI --> Actor : display message saying user has been deactivated

    deactivate UI
    deactivate Actor
    @enduml