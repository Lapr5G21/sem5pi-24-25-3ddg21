@startuml
class RankCandidateUI <<presentation>>{
        + headline(): String
        + doShow(): boolean
    }

    class RankCandidateController<<application>> {
        + listAllJobOpenings(): Iterable<JobApplication>
        + findAllApplicationsByJobReference(jobReference: JobReference): Optional<JobOpening>
        + updateApplicationRank(application: JobApplication, position : Integer): Rank
        + markAsUnrankedRemainingApplications(applicationList : List<JobApplication>) : void
        + verifyIsInAnalysisPhase(jobReference : String) : JobOpeningProcess
    }


    class AuthorizationService <<service>>{
        + ensureAuthenticatedUserHasAnyOf(roles: Role[]): void
        }

    class JobApplicationService <<service>>{
        + listAllApplications(jobReference:String) : Iterable<JobApplication>
    }

    class JobOpeningService <<service>>{
        +listAlljobOpenings():Iterable<JobOpening>
    }

    class Rank {
        + create(position : Integer)) : Rank
        + create() : Rank
        + setPosition(position : Integer) : Integer
        + rank () : Rank
    }

    class PersistenceContext {
        + repositories(): RepositoryFactory
    }

    class RepositoryFactory {
        + applications(): JobApplicationRepository
        + jobOpenings(): JobOpeningRepository
        + jobOpeningProcesses() : JobOpeningProcessRepository
        + ranks()
    }

    class JobApplicationRepository {
        + save(jobApplication: JobApplication): void
    }

    class JobOpeningProcessRepository{
        + findByJobReference(jobReference : String)
    }

    class JobOpeningRepository {
        + findAllActive() : Iterable <JobOpening>
    }

    class JobOpeningProcess{
        + getCurrentPhase() : JobOpeningPhase
    }

    class RankRepository{
        + findAll() : Iterable <Rank>
        + save(rank:Rank) : Rank
    }

    class JobOpeningProcessService {
    + verifyIsInAnalysisPhase(jobReference : String) : JobOpeningProcess
    }

    class RankService {
    + updateApplicationRank(application: JobApplication, position : Integer): Rank
    + markAsUnrankedRemainingApplications(applicationList : List<JobApplication>) : void
    }





RankCandidateUI --> RankCandidateController: theController
RankCandidateController --> JobApplicationService: jobApplicationService
RankCandidateController --> AuthorizationService : authzService
RankCandidateController --> RankService : rankService
RankService --> RankRepository : rankRepository
RankCandidateController --> JobOpeningService : jobOpeningService
RankCandidateController --> JobOpeningProcessService : jobOpeningProcessService
JobOpeningProcessService --> JobOpeningProcessRepository : jobOpeningProcessRepository
JobOpeningProcessRepository --> JobOpeningProcess : jobOpeningProcess
JobOpeningService --> JobOpeningRepository: jobOpeningRepository
JobApplicationService --> JobApplicationRepository: jobApplicationRepository
RankService --> Rank: rank
RankCandidateController --> PersistenceContext : persistence
PersistenceContext --> RepositoryFactory : factory
@enduml