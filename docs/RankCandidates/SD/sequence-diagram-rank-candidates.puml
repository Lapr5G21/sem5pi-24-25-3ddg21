@startuml
'https://plantuml.com/sequence-diagram

participant CustomerManager as Actor
participant RankCandidatesUI as UI
participant RankCandidatesController as Controller
participant PersistenceContext as Persistence
participant RepositoryFactory as Factory
participant AuthorizationService as AuthzService
participant JobOpeningService as JobOpeningService
participant RankService as RankService
participant JobOpeningProcessService as JobOpeningProcessService
participant JobApplicationService as JobApplicationService
participant Rank as Domain
database JobOpeningRepository as JobOpeningRepository
database JobApplicationRepository as ApplicationRepository
database RankRepository as RankRepository
database JobOpeningProcessRepository as JobOpeningProcessRepository
activate Actor

Actor -> UI : selects to rank the candidates

    activate UI

        UI -> Controller : create()

        UI -> Controller : listAllJobOpenings()


        activate Controller

            Controller -> AuthzService : ensureAuthenticatedUserHasAnyOf(roles)

            Controller -> JobOpeningService : create()

            Controller -> JobOpeningService : listAllJobOpenings()

            activate JobOpeningService

                    JobOpeningService -> JobOpeningRepository : findAllOpen()

                    activate JobOpeningRepository

                    JobOpeningRepository --> JobOpeningService : jobOpeningsActive

                    deactivate JobOpeningRepository

                    JobOpeningService --> Controller : jobOpeningsActive

                    deactivate JobOpeningService

                    Controller --> UI : jobOpeningsActive

                    deactivate Controller

                    UI --> Actor : show all job openings and ask to select one)

                    deactivate UI

                    Actor -> UI : selects one

                    activate UI

                    UI -> Controller : verifyIsInAnalysisPhase((jobReference)

                    activate Controller

                    Controller -> Persistence : create()

                    Persistence -> Factory : jobOpeningProcesses()

                    activate Factory

                    Factory --> Controller : jobOpeningProcessRepository

                    deactivate Factory

                    Controller -> JobOpeningProcessService : create(jobOpeningProcessRepository)

                    Controller -> JobOpeningProcessService : verifyIsInAnalysisPhase(jobReference)

                   activate JobOpeningProcessService

                   JobOpeningProcessService -> JobOpeningProcessRepository : findByJobReference(jobReference)

                   activate JobOpeningProcessRepository

                   JobOpeningProcessRepository --> JobOpeningProcessService : currentPhase

                   deactivate JobOpeningProcessRepository

                    JobOpeningProcessService --> Controller : currentPhase

                    deactivate JobOpeningProcessService

                    Controller --> UI : currentPhase

                   deactivate Controller

                    UI -> Actor : shows all rank methods and asks to select one

                    deactivate UI

                    Actor -> UI : selects one

                    activate UI

                    UI -> Controller : findAllApplicationsByJobReference(jobReference)

                    activate Controller

                        Controller -> JobApplicationService : listAllApplications(jobReference)

                        activate JobApplicationService

                            JobApplicationService -> ApplicationRepository : findByJobReference(jobReference)

                            activate ApplicationRepository

                            ApplicationRepository --> JobApplicationService : applications

                            deactivate ApplicationRepository

                            ApplicationRepository --> Controller : applications

                            deactivate JobApplicationService

                            Controller --> UI : applications

                            deactivate Controller

                            loop (while he wants to rank)

                            UI --> Actor : shows applications and asks to select the application he wants to rank

                            deactivate UI

                            Actor -> UI : selects the application

                            activate UI

                            UI -> Controller : updateApplicationRank(application,position)

                            activate Controller

                            Controller -> Factory : ranks()

                            activate Factory

                            Factory --> Controller : RankRepository

                            deactivate Factory

                            Controller -> RankService : create(rankRepository)

                            Controller -> RankService : updateApplicationRank(application,position)


                            activate RankService

                            RankService -> RankRepository : getRankByJobApplication(applicationId)

                            activate RankRepository

                            RankRepository --> RankService : optionalRank

                            deactivate RankRepository

                            alt rank already exists over RankService


                            RankService -> Rank : setPosition(rank)

                            RankService -> RankRepository : save()

                            activate RankRepository

                            RankRepository --> RankService : rank

                            deactivate RankRepository

                            else

                            RankService -> Rank : create(id,position)

                            RankService -> RankRepository : save(rank)

                            activate RankRepository

                            RankRepository --> RankService : rank

                            deactivate RankRepository

                            end

                            RankService --> Controller : rank

                            deactivate RankService

                            Controller --> UI : rank

                            deactivate Controller

                            UI --> Actor : Rank of the application successfully updated
                            end loop

                            alt applications.size > 0

                            UI -> Controller : markApplicationAsUnranked(applicationList)

                            activate Controller

                            Controller -> RankService : markAsUnranked(applicationList)

                            end alt

                            UI --> Actor : All the applications you wanted to rank were ranked

                            deactivate UI

                            deactivate Actor
@enduml