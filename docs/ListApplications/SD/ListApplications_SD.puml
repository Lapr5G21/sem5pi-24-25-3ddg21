@startuml
skinparam handwritten true
skinparam monochrome true
skinparam packageStyle rect
skinparam defaultFontName FG Virgil
skinparam shadowing false

actor CustomerManager as Actor
participant ListJobApplicationsUI as UI <<presentation>>
participant ListJobApplicationsController as Controller <<application>>
participant AuthorizationService as Authz <<service>>
participant JobOpeningBuilder as JobOpeningBuilder <<builder>>
participant "jobOpening : JobOpening" as Domain <<domain>>
participant PersistenceContext as Persistence <<persistence>>
participant RepositoryFactory as Factory <<factory>>
participant JobApplicationService as JobApplicationService<<service>>
database JobOpeningRepository as JobOpeningRepository<<repository>>
database JobApplicationRepository as JobApplicationRepository<<repository>>
database CustomerRepository as CustomerRepository<<repository>>

activate Actor

    Actor -> UI : List JobApplications

    activate UI

        UI -> Controller : create()

            UI -> Controller : listAllJobOpenings()

            activate Controller

                Controller -> Authz : ensureAuthentictedUserHasAnyOf(roles)

                Controller -> Persistence : repositories()

                 activate Persistence

                 Persistence -> Factory : factory()

                 Persistence --> Controller : factory

                 deactivate Persistence

                 Controller -> Factory : jobOpenings()

                 activate Factory

                 Factory --> Controller : jobOpeningRepository

                 deactivate Factory

                 Controller -> JobOpeningRepository : findAllOpen()

                 activate JobOpeningRepository

                 JobOpeningRepository --> Controller : allJobOpenings

                 deactivate JobOpeningRepository

                 Controller --> UI : allJobOpenings

                 deactivate Controller

                 UI --> Actor : displays all jobOpenings and asks to select one

                 deactivate UI

                 Actor -> UI : select one

                 activate UI

                 UI -> Controller : listApplications

                 activate Controller

                 Controller -> JobApplicationService : create()

                 Controller -> JobApplicationService : listAllApplications(jobReference)

                 activate JobApplicationService

                 JobApplicationService -> JobApplicationRepository : findByJobReference(jobReference)

                 activate JobApplicationRepository

                 JobApplicationRepository --> JobApplicationService : allApplications

                 deactivate JobApplicationRepository

                 JobApplicationService --> Controller : allApplications

                 deactivate JobApplicationService

                 Controller --> UI : allApplications

                 deactivate Controller

                 UI --> Actor : displays all applications
        deactivate UI
    deactivate Actor
@enduml